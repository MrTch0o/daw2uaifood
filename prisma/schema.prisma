// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMERAÇÕES
enum UserType {
  CLIENT
  ADMIN
}

enum PaymentMethod {
  CASH
  DEBIT
  CREDIT
  PIX
}

// MODELOS (TABELAS)
model User {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String   @unique
  password  String
  type      UserType @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  // Relações com Order
  orders        Order[] @relation("ClientOrders") // <-- NOMEAMOS a relação existente
  createdOrders Order[] @relation("CreatedBy")    // <-- ADICIONAMOS o campo que faltava

  @@map("users")
}


model Address {
  id        Int      @id @default(autoincrement())
  street    String
  number    String
  district  String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique // Chave estrangeira para User

  @@map("addresses")
}

model Category {
  id          Int      @id @default(autoincrement())
  description String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items Item[] // Relacionamento 1 para N com Item

  @@map("categories")
}

model Item {
  id          Int      @id @default(autoincrement())
  description String
  unitPrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      // Chave estrangeira para Category

  orderItems OrderItem[] // Relacionamento 1 para N com OrderItem

  @@map("items")
}

model Order {
  id            Int           @id @default(autoincrement())
  status        String        @default("PENDING")
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  client   User @relation("ClientOrders", fields: [clientId], references: [id]) // <-- USAMOS O NOME AQUI
  clientId Int

  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id]) // <-- USAMOS O NOME AQUI
  createdById Int

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   // Chave estrangeira para Order

  item   Item @relation(fields: [itemId], references: [id])
  itemId Int  // Chave estrangeira para Item

  @@map("order_items")
}